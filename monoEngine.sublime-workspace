{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tra",
				"translateLocal(const glm::vec3 &)	void"
			],
			[
				"set",
				"setFov(float)	void"
			],
			[
				"modif",
				"m_modifiedProj	bool"
			],
			[
				"mmodi",
				"m_modifiedProj	bool"
			],
			[
				"mmod",
				"m_modifiedProj	bool"
			],
			[
				"m_modi",
				"m_modifiedProj	bool"
			],
			[
				"m_f",
				"m_fov	float"
			],
			[
				"get",
				"getViewMatrix() const	const glm::mat4 &"
			],
			[
				"m_mod",
				"m_modifiedProj	bool"
			],
			[
				"pers",
				"perspective(const valType &fovy, const valType &aspect, const valType &zNear, const valType &zFar)	detail::tmat4x4<valType, defaultp>"
			],
			[
				"vec",
				"vec3	typedef"
			],
			[
				"crea",
				"createVertexIndexDataCube(unsigned int num)	std::vector<GLushort>"
			],
			[
				"create",
				"createVertexPositionDataCube(unsigned int num)	std::vector<GLfloat>"
			],
			[
				"gl_",
				"gl_InstanceID"
			],
			[
				"GLi",
				"GLintptr	typedef"
			],
			[
				"mul",
				"multidrawElementDemo(engine::Engine &e)	void"
			],
			[
				"pri",
				"primcount	const auto"
			],
			[
				"er",
				"erase(const_iterator __first, const_iterator __last)	iterator"
			],
			[
				"pop",
				"pop_front()	void"
			],
			[
				"s",
				"stop() const	GLuint64"
			],
			[
				"GL_Timeal",
				"GL_TIME_ELAPSED	macro"
			],
			[
				"glgetquer",
				"glGetQueryObjectui64v	macro"
			],
			[
				"glEnd",
				"glEndQuery	macro"
			],
			[
				"GLuint",
				"GLuint64	typedef"
			],
			[
				"GL_TIME",
				"GL_TIME_ELAPSED	macro"
			],
			[
				"GL_Q",
				"GL_QUERY	macro"
			],
			[
				"em",
				"emplace_back(_Args &&__args...)	void"
			],
			[
				"GL_UNSI",
				"GL_UNSIGNED_SHORT	macro"
			],
			[
				"glMu",
				"glMultiDrawArrays	macro"
			],
			[
				"glgetnamed",
				"glGetNamedBufferParameteriv	macro"
			],
			[
				"GL_BU",
				"GL_BUFFER_SIZE	macro"
			],
			[
				"glGetnamed",
				"glGetNamedBufferParameteriv	macro"
			],
			[
				"glMapNamed",
				"glMapNamedBufferRange	macro"
			],
			[
				"gldraw",
				"glDrawArraysEXT	macro"
			],
			[
				"GL_",
				"gl_VertexID"
			],
			[
				"LOG",
				"LOG(...)	macro"
			],
			[
				"glfw",
				"glfwGetTime()	double"
			],
			[
				"GL_Vs",
				"GL_VERTEX_SHADER	macro"
			],
			[
				"m_",
				"m_handle	GLuint"
			],
			[
				"gliss",
				"glIsShader	macro"
			],
			[
				"glan",
				"glNamedBufferStorage	macro"
			],
			[
				"GL_VER",
				"GL_VERTEX_ARRAY	macro"
			],
			[
				"glName",
				"glNamedBufferStorage	macro"
			],
			[
				"GL_PR",
				"GL_PROGRAM	macro"
			],
			[
				"GLTESS",
				"GL_TESS_EVALUATION_SHADER	macro"
			],
			[
				"GL_GE",
				"GL_GEOMETRY_SHADER	macro"
			],
			[
				"GL_FRA",
				"GL_FRAGMENT_SHADER	macro"
			],
			[
				"glCreates",
				"glCreateShader	macro"
			],
			[
				"link",
				"linkStatus	GLboolean"
			],
			[
				"glunifomatr",
				"glUniformMatrix2fv	macro"
			],
			[
				"initgl",
				"initGLFW()	void"
			],
			[
				"a",
				"append(const _CharT *__s)	basic_string<_CharT, _Traits, _Alloc> &"
			],
			[
				"alloca",
				"allocateShader(const std::string &file)	bool"
			],
			[
				"EX",
				"EXIT_FAILURE	macro"
			],
			[
				"str",
				"string"
			],
			[
				"re",
				"reset()	void"
			],
			[
				"c",
				"c_str() const	const _CharT *"
			],
			[
				"GLFWw",
				"GLFWwindow	typedef"
			],
			[
				"defi",
				"define"
			],
			[
				"makeuni",
				"make_unique<typename _Tp>(size_t __num)	typename _MakeUniq<_Tp>::__array"
			],
			[
				"u",
				"uGamma"
			],
			[
				"m_s",
				"m_shadowsEnabled"
			],
			[
				"tog",
				"toggleShadows"
			],
			[
				"sce",
				"scene_scale"
			],
			[
				"rendervo",
				"renderVoxelColors"
			],
			[
				"render",
				"renderVoxelBoxes"
			],
			[
				"rad",
				"coneRadiusAtDistance"
			],
			[
				"color",
				"colorIndirect"
			],
			[
				"trace",
				"traceConeDiffuse"
			],
			[
				"d",
				"diffuse"
			],
			[
				"to",
				"totalColor"
			],
			[
				"occ",
				"occlusionPerCone"
			],
			[
				"dista",
				"distanceDecay"
			],
			[
				"redvoxe",
				"renderVoxelBoxesColored"
			],
			[
				"redervox",
				"renderVoxelBoxes"
			],
			[
				"diff",
				"diffuse_frag"
			],
			[
				"sha",
				"shader"
			],
			[
				"GL_FR",
				"GL_FRAGMENT_SHADER"
			],
			[
				"die",
				"diameter"
			],
			[
				"calc",
				"calculateColorAt"
			],
			[
				"in",
				"incident"
			],
			[
				"nor",
				"normalizeOutput"
			],
			[
				"gluni",
				"glUniform1ui"
			],
			[
				"udif",
				"u_diffuseModifier"
			],
			[
				"uspec",
				"u_specularModifier"
			],
			[
				"angle",
				"angleModifier"
			],
			[
				"rederdi",
				"renderIndirectDiffuse"
			],
			[
				"step",
				"stepSize"
			],
			[
				"spec",
				"specular"
			],
			[
				"spc",
				"specular"
			],
			[
				"renderIndi",
				"renderIndirectDiffuse"
			],
			[
				"renderIndirect",
				"renderIndirectSpecular"
			],
			[
				"evel",
				"evenHigherLevel"
			],
			[
				"out",
				"out_DiffuseNormal"
			],
			[
				"tree",
				"treeLevels"
			],
			[
				"debu",
				"debugAtMax"
			],
			[
				"tre",
				"treeLevels"
			],
			[
				"m",
				"m_options"
			],
			[
				"shad",
				"shadows"
			],
			[
				"renderVoxel",
				"renderVoxelColors"
			],
			[
				"fo",
				"foundSomething"
			],
			[
				"grou",
				"groupWidth"
			],
			[
				"u_diffuse",
				"u_diffuseConeGridSize"
			],
			[
				"m_re",
				"m_renderVoxelBoxes"
			],
			[
				"m_dif",
				"m_diffuseConeGridSize"
			],
			[
				"m_renderVox",
				"m_renderVoxelBoxes"
			],
			[
				"m_renderVoxel",
				"m_renderVoxelBoxes"
			],
			[
				"m_rnderer",
				"m_renderer"
			],
			[
				"gl",
				"gl_FragCoord"
			],
			[
				"m_con",
				"m_coneTracing"
			],
			[
				"cal",
				"calculateSpecularColor"
			],
			[
				"GL_F",
				"GL_FRAGMENT_SHADER"
			],
			[
				"regi",
				"registerShader"
			],
			[
				"Rend",
				"RendererInterface"
			],
			[
				"vox",
				"voxelSize"
			],
			[
				"itera",
				"iterateTreeLevel"
			],
			[
				"chi",
				"childIdx"
			],
			[
				"nde",
				"nodePtr"
			],
			[
				"voxe",
				"voxelDim"
			],
			[
				"vo",
				"voxel_size"
			],
			[
				"ch",
				"childIdx"
			],
			[
				"oc",
				"octreeColor"
			],
			[
				"t",
				"threadID"
			],
			[
				"co",
				"cone"
			],
			[
				"con",
				"cone"
			],
			[
				"tt",
				"totalColor"
			],
			[
				"refle",
				"reflectVec"
			],
			[
				"radiance",
				"radiance_center_back"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 20308,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shader/test/basicdraw.vert",
			"settings":
			{
				"buffer_size": 175,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/core/camera.cpp",
			"settings":
			{
				"buffer_size": 3658,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/core/camera.hpp",
			"settings":
			{
				"buffer_size": 1002,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 117.0,
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"subl",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prefere",
				"Preferences: Settings - User"
			],
			[
				"pre",
				"Preferences: Settings - Default"
			],
			[
				"clang",
				"Preferences: ClangComplete Settings – Default"
			],
			[
				"setsyntc++",
				"Set Syntax: C++"
			],
			[
				"clangcp",
				"Set Syntax: ClangCompleteErrorPanel"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"sublime.log_commands(True)",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/gartenriese/Documents/monoEngine",
		"/home/gartenriese/Documents/monoEngine/shader",
		"/home/gartenriese/Documents/monoEngine/shader/test",
		"/home/gartenriese/Documents/monoEngine/src",
		"/home/gartenriese/Documents/monoEngine/src/engine",
		"/home/gartenriese/Documents/monoEngine/src/engine/core",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl"
	],
	"file_history":
	[
		"/home/gartenriese/Documents/project/shaders/tree/voxel.glsl",
		"/home/gartenriese/Documents/project/src/core/camera.h",
		"/home/gartenriese/Documents/project/src/core/camera.cpp",
		"/home/gartenriese/Documents/monoEngine/contrib/glm/glm/gtc/matrix_transform.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/vertexarray.cpp",
		"/home/gartenriese/Documents/monoEngine/shader/test/instancedraw.vert",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/vertexarray.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/timer.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/timer.cpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/buffer.cpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/program.cpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/globject.cpp",
		"/home/gartenriese/Documents/monoEngine/shader/test/multidraw.vert",
		"/home/gartenriese/Documents/monoEngine/shader/test/color.frag",
		"/home/gartenriese/Documents/monoEngine/shader/test/basicdraw.vert",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/uniform.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/program.hpp",
		"/home/gartenriese/Documents/glEngine/src/engine/passes/basicpass.cpp",
		"/home/gartenriese/Documents/monoEngine/shader/test/triangle.frag",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/buffer.hpp",
		"/home/gartenriese/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/gartenriese/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/texture.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/texture.cpp",
		"/home/gartenriese/Documents/glEngine/src/engine/gl/texture.cpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/shader.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/globject.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/glinclude.hpp",
		"/home/gartenriese/Documents/monoEngine/shader/test/triangle.vert",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/shader.cpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/engine.cpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/engine.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/window.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/window.cpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/debug.hpp",
		"/home/gartenriese/Documents/monoEngine/src/engine/debug.cpp",
		"/home/gartenriese/Documents/monoEngine/run.sh",
		"/home/gartenriese/Documents/monoEngine/CMakeLists.txt",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/glincludes.hpp",
		"/home/gartenriese/Documents/monoEngine/src/demo.cpp",
		"/home/gartenriese/Documents/monoEngine/src/demo.hpp",
		"/home/gartenriese/.config/sublime-text-3/Packages/User/SublimeClang.sublime-settings",
		"/home/gartenriese/Documents/monoEngine/src/engine/glfwinclude.hpp",
		"/home/gartenriese/Documents/monoEngine/Makefile",
		"/home/gartenriese/Documents/monoEngine/src/engine/gl/extern/glew.c",
		"/home/gartenriese/Documents/monoEngine/build/contrib/src/glfw/include/GLFW/glfw3.h",
		"/home/gartenriese/.config/sublime-text-3/Packages/SublimeClang/SublimeClang.sublime-settings",
		"/usr/include/c++/4.9/cstddef",
		"/home/gartenriese/.config/sublime-text-3/Packages/SublimeClang/internals/clang/include/stdint.h",
		"/home/gartenriese/Documents/monoEngine/.ycm_extra_conf.py",
		"/home/gartenriese/Documents/monoEngine/contrib/glm/glm/packing.hpp",
		"/home/gartenriese/Documents/project/CMakeLists.txt",
		"/home/gartenriese/Documents/ParAlg/a3/Makefile",
		"/home/gartenriese/Documents/glEngine/includes/glfw3.h",
		"/home/gartenriese/Documents/project/src/framework/vars.def",
		"/home/gartenriese/Documents/project/shaders/basic/gamma.frag",
		"/home/gartenriese/Documents/project/resources/SparseVoxelOctree-master/3party/glm/test/gtx/gtx_bit.cpp",
		"/home/gartenriese/Documents/project/src/gl/gl_objects.h",
		"/home/gartenriese/Documents/project/src/voxel.h",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/glew-1.9.0/auto/core/GL_ARB_multitexture",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/glew-1.9.0/auto/core/GL_ARB_imaging",
		"/home/gartenriese/Documents/project/shaders/tree/mipmap.comp",
		"/home/gartenriese/Documents/project/contrib/glm/glm/gtx/mixed_product.hpp",
		"/home/gartenriese/Documents/project/contrib/glm/glm/gtc/matrix_integer.hpp",
		"/home/gartenriese/Documents/project/src/main.cpp",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/projects/voxel_cone_tracing_gi/src/render/render_glsl.h",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/projects/voxel_cone_tracing_gi/src/render/render.h",
		"/home/gartenriese/Documents/project/src/core/light.cpp",
		"/home/gartenriese/Documents/project/shaders/basic/direct_lighting.frag",
		"/home/gartenriese/Documents/project/shaders/basic/vertexpulling.frag",
		"/home/gartenriese/Documents/project/shaders/basic/diffuse.frag",
		"/home/gartenriese/Documents/project/src/framework/imgui.h",
		"/home/gartenriese/Documents/project/src/gbuffer.cpp",
		"/home/gartenriese/Documents/project/shaders/tree/bbox.frag",
		"/home/gartenriese/Documents/project/shaders/conetracing/conetracing.frag",
		"/home/gartenriese/Documents/project/resources/VoxelConeTracing-master/bin/assets/shader/_coneTrace.shader",
		"/home/gartenriese/Documents/project/resources/VoxelConeTracing-master/VoxelConeTracing/src/VoxelConeTracing/Raycasting/ConeTracePass.h",
		"/home/gartenriese/Documents/project/resources/VoxelConeTracing-master/VoxelConeTracing/src/VoxelConeTracing/Raycasting/ConeTracePass.cpp",
		"/home/gartenriese/Documents/project/resources/VoxelConeTracing-master/bin/assets/shader/ConeTraceFrag.shader",
		"/home/gartenriese/Documents/project/build/CMakeFiles/CMakeOutput.log",
		"/home/gartenriese/Documents/project/src/core/camera_manager.cpp",
		"/home/gartenriese/Documents/project/shaders/tree/inject_direct_lighting.comp",
		"/home/gartenriese/Documents/project/shaders/conetracing/gbuffer.frag",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/glew-1.9.0/auto/core/GL_EXT_bindable_uniform",
		"/home/gartenriese/Documents/project/build/contrib/src/glfw-stamp/glfw-build",
		"/home/gartenriese/Documents/project/grapro.cfg",
		"/home/gartenriese/Documents/project/src/grapro.cpp",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/assimp-3.0/AssimpConfig.cmake.in",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/assimp-3.0/code/AssimpCExport.cpp",
		"/home/gartenriese/Documents/project/shaders/tree/nodeflag.comp",
		"/home/gartenriese/Documents/project/shaders/tree/nodealloc.comp",
		"/home/gartenriese/Documents/project/src/renderer.h",
		"/home/gartenriese/Documents/project/scenes/sponza/lights.dae",
		"/home/gartenriese/Documents/project/src/core/loader.cpp",
		"/home/gartenriese/Documents/project/shaders/common/voxel.glsl",
		"/home/gartenriese/Documents/project/shaders/conetracing/indirect_diffuse.frag",
		"/home/gartenriese/Documents/project/shaders/conetracing/ssq_ao.frag",
		"/home/gartenriese/Documents/project/shaders/conetracing/indirect_specular.frag",
		"/home/gartenriese/Documents/project/shaders/tree/colorboxes.frag",
		"/home/gartenriese/Documents/project/shaders/tree/nodealloc_bm.comp",
		"/home/gartenriese/Documents/project/shaders/tree/nodeflag_bm.comp",
		"/home/gartenriese/Documents/project/shaders/tree/voxelize.frag",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/jpeg-6b/usage.doc",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/zlib123/zutil.c",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/lzma465/C/LzmaUtil/Lzma86Enc.c",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/lzma465/CPP/7zip/UI/Common/ZipRegistry.h",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/lzma465/CPP/7zip/UI/Common/ExtractingFilePath.cpp",
		"/home/gartenriese/Documents/project/src/rendererimpl_bm.cpp",
		"/home/gartenriese/Documents/project/src/rendererinterface.cpp",
		"/home/gartenriese/Documents/project/src/rendererinterface.h",
		"/home/gartenriese/Documents/project/src/rendererimpl_bm.h",
		"/home/gartenriese/Documents/project/src/core/shader_interface.h",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/assimp-3.0/code/BlenderIntermediate.h",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/assimp-3.0/tools/assimp_view/base_rendering.bmp",
		"/home/gartenriese/Documents/project/shaders/basic/shadow.geom",
		"/home/gartenriese/Documents/project/src/rendererimpl_pk.cpp",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/projects/common/render_immediate.h",
		"/home/gartenriese/Documents/project/shaders/basic/shadow_cube.geom",
		"/home/gartenriese/Documents/project/shaders/basic/shadow.vert",
		"/home/gartenriese/Documents/project/shaders/basic/ssq.frag",
		"/home/gartenriese/Documents/project/shaders/basic/depth_only.frag",
		"/home/gartenriese/Documents/project/shaders/common/bindings.glsl",
		"/home/gartenriese/Documents/project/resources/voxel_cone_tracing_gi/3rdparty/lzma465/C/BraIA64.c",
		"/home/gartenriese/Documents/project/shaders/basic/basic.frag",
		"/home/gartenriese/Documents/project/src/grapro.h",
		"/home/gartenriese/Documents/project/src/core/managers.cpp",
		"/home/gartenriese/Documents/project/shaders/basic/depth_only.vert",
		"/home/gartenriese/Documents/project/src/core/camera_manager.h"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/gartenriese/Documents/project",
			"/home/gartenriese/Documents/glEngine/src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"vec.emplace_back",
			"vec.emplace_back(e.x);\n			vec.emplace_back(e.y);\n			vec.emplace_back(e.z);",
			"vec.emplace_back(d.x);\n			vec.emplace_back(d.y);\n			vec.emplace_back(d.z);",
			"vec.emplace_back(a.x);\n			vec.emplace_back(a.y);\n			vec.emplace_back(a.z);",
			"vec.emplace_back(c.x);\n			vec.emplace_back(c.y);\n			vec.emplace_back(c.z);",
			"b.",
			"b",
			"mplace_",
			"+ ",
			"h",
			"void ",
			"float",
			"m_aspect_ratio",
			"m_projmat",
			"orientation",
			"f",
			"u",
			"recalcViewMatrix",
			"k(delta - stepSize",
			"(stepSize - del",
			"ck(stepSize - delta",
			"stepSize - delta",
			"createVertexPositionData",
			"first",
			"GLchar",
			"GLint *",
			"GLushort *",
			"char",
			"short",
			"static",
			"GLuint",
			"short",
			"byte",
			"NUM_TRIANGLES * NUM_TRIANGLES",
			"num",
			"vec",
			"VertexArray",
			"Buffer",
			"i",
			"multi",
			"red_frag",
			" 0.f,",
			"void",
			"Buffer",
			"BUFFER",
			"Buffer",
			"uffer",
			"_BUFFER_",
			"_",
			"setStorageSize",
			"esh->vertices[i][2]",
			"DEB",
			"offset",
			"DEB",
			"Buffer",
			"VAO",
			"m_shader",
			"m_program",
			"Program",
			"glCreateShader",
			"Object",
			"Program",
			"fv",
			"glUniformMatrix2v",
			"uiv",
			"uv",
			"uiv",
			"uv",
			"i(m",
			"(",
			"iv",
			"bvec",
			"exit",
			"cout",
			"Debug::log",
			"var",
			"Shader",
			"grapro",
			"OPENGL",
			"OpenGL",
			"PkgConfig",
			"<color sid=\"color\">0",
			"<color sid=\"color\">",
			"0.3 0.3 0.3",
			"<constant_attenuation>20",
			"<constant_attenuation>1",
			"constant_attenuation>1",
			"1.11111e-7",
			"specular",
			"imgui::slider",
			"calculateSpecularColor",
			"Diffuse",
			"diffuse",
			"calculateDiffuseColor(normal, wpos.xyz)",
			"float(u_treeLevels - 1)",
			"traceCone",
			"u_numSteps",
			"diffuse_color",
			"u_shadowsEnabled",
			"m_voxel_bbox_prog",
			"m_direct_lighting_prog",
			"u_shadowsEnabled",
			"====",
			"u_shadowsEnabled",
			"m_brick_texture",
			"m_voxel_bbox_prog",
			"u_shadowsEnabled",
			"m_render_octree",
			"next_levels",
			"m_octree_debug_level",
			"unsigned ",
			"= ",
			"Color",
			"color",
			"col",
			"normalS",
			"normal.",
			"normal",
			"col.",
			".color",
			"Color",
			"color",
			"diffuse",
			"+",
			"-",
			"+",
			"u_coneGridSize",
			"renderVoxelBoxes"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20308,
						"regions":
						{
						},
						"selection":
						[
							[
								338,
								338
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "shader/test/basicdraw.vert",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 175,
						"regions":
						{
						},
						"selection":
						[
							[
								143,
								143
							]
						],
						"settings":
						{
							"syntax": "Packages/Shader Syntax (GLSL HLSL Cg)/OpenGL SL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/engine/core/camera.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3658,
						"regions":
						{
						},
						"selection":
						[
							[
								2062,
								2062
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/engine/core/camera.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1002,
						"regions":
						{
						},
						"selection":
						[
							[
								487,
								487
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 211.0
	},
	"output.clangcomplete":
	{
		"height": 265.0
	},
	"output.exec":
	{
		"height": 225.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "monoEngine.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"debu",
				"src/engine/debug.cpp"
			],
			[
				"gbuffer",
				"src/gbuffer.cpp"
			],
			[
				"varsdef",
				"src/framework/vars.def"
			],
			[
				"gamma",
				"shaders/basic/gamma.frag"
			],
			[
				"mipmap",
				"shaders/tree/mipmap.comp"
			],
			[
				"lightda",
				"scenes/sponza/lights.dae"
			],
			[
				"loader",
				"src/core/loader.cpp"
			],
			[
				"conetr",
				"shaders/conetracing/conetracing.frag"
			],
			[
				"graprc",
				"src/grapro.cpp"
			],
			[
				"grapro",
				"src/grapro.h"
			],
			[
				"render",
				"src/renderer.cpp"
			],
			[
				"varsde",
				"src/framework/vars.def"
			],
			[
				"lightsda",
				"scenes/sponza/lights.dae"
			],
			[
				"voxelfr",
				"shaders/tree/voxelize.frag"
			],
			[
				"voxelgl",
				"shaders/common/voxel.glsl"
			],
			[
				"voxel",
				"src/voxel.h"
			],
			[
				"renderinterfa",
				"src/rendererinterface.cpp"
			],
			[
				"shaderin",
				"src/core/shader_interface.h"
			],
			[
				"renderimpl",
				"src/rendererimpl_bm.cpp"
			],
			[
				"lightc",
				"src/core/light.cpp"
			],
			[
				"bindig",
				"shaders/common/bindings.glsl"
			],
			[
				"depth",
				"shaders/basic/depth_only.frag"
			],
			[
				"cameramana",
				"src/core/camera_manager.h"
			],
			[
				"main",
				"src/main.cpp"
			],
			[
				"lightcpp",
				"src/core/light.cpp"
			],
			[
				"sha",
				"shaders/basic/shadow.geom"
			],
			[
				"shadcub",
				"shaders/basic/shadow_cube.geom"
			],
			[
				"vertex",
				"shaders/basic/vertexpulling.frag"
			],
			[
				"shadcube",
				"shaders/basic/shadow_cube.geom"
			],
			[
				"shadow",
				"shaders/basic/shadow.geom"
			],
			[
				"renderb",
				"src/rendererimpl_bm.h"
			],
			[
				"voxeligeo",
				"shaders/tree/voxelize.geom"
			],
			[
				"voxelglsl",
				"shaders/common/voxel.glsl"
			],
			[
				"graproh",
				"src/grapro.h"
			],
			[
				"gra",
				"src/grapro.cpp"
			],
			[
				"nodeal",
				"shaders/tree/nodealloc_bm.comp"
			],
			[
				"nodefl",
				"shaders/tree/nodeflag_bm.comp"
			],
			[
				"interfa",
				"src/rendererinterface.h"
			],
			[
				"renderer",
				"src/renderer.h"
			],
			[
				"grapr",
				"src/grapro.cpp"
			],
			[
				"vars",
				"src/framework/vars.def"
			],
			[
				"loade",
				"src/core/loader.cpp"
			],
			[
				"vard",
				"src/framework/vars.def"
			],
			[
				"grap",
				"src/grapro.cpp"
			],
			[
				"flagco",
				"shaders/tree/nodeflag.comp"
			],
			[
				"voxelfra",
				"shaders/tree/voxelize.frag"
			],
			[
				"voxelige",
				"shaders/tree/voxelize.geom"
			],
			[
				"camerama",
				"src/core/camera_manager.cpp"
			],
			[
				"gl",
				"src/gl/gl_objects.h"
			],
			[
				"imgui",
				"src/framework/imgui.h"
			],
			[
				"nodefla",
				"shaders/tree/nodeflag.comp"
			],
			[
				"vars.def",
				"src/framework/vars.def"
			],
			[
				"init",
				"resources/SparseVoxelOctree-master/WIN/SVO/shader/nodeInit.com.glsl"
			],
			[
				"glrouti",
				"resources/SparseVoxelOctree-master/src/glRoutine.cpp"
			],
			[
				"vox",
				"src/voxel.h"
			],
			[
				"nodei",
				"shaders/tree/nodeinit.comp"
			],
			[
				"node",
				"shaders/tree/nodealloc.comp"
			],
			[
				"fla",
				"shaders/tree/flagoctree.comp"
			],
			[
				"nodii",
				"resources/SparseVoxelOctree-master/WIN/SVO/shader/nodeInit.com.glsl"
			],
			[
				"alloc",
				"resources/SparseVoxelOctree-master/WIN/SVO/shader/nodeAlloc.com.glsl"
			],
			[
				"voxe",
				"src/voxel.h"
			],
			[
				"flagoc",
				"shaders/tree/flagoctree.comp"
			],
			[
				"vardef",
				"src/framework/vars.def"
			],
			[
				"re",
				"src/renderer.h"
			],
			[
				"voxeli",
				"resources/SparseVoxelOctree-master/WIN/SVO/shader/voxelize.geom.glsl"
			],
			[
				"materia",
				"src/core/material_manager.cpp"
			],
			[
				"renderh",
				"src/renderer.h"
			],
			[
				"graproc",
				"grapro.cfg"
			],
			[
				"mainwi",
				"src/framework/mainwindow.cpp"
			],
			[
				"grao",
				"src/grapro.cpp"
			],
			[
				"mater",
				"src/core/material.h"
			],
			[
				"animal",
				"src/animal.hpp"
			],
			[
				"windothreadcpp",
				"src/engine/windowthread.cpp"
			],
			[
				"wind",
				"src/engine/window.hpp"
			],
			[
				"windo",
				"src/engine/window.cpp"
			],
			[
				"hand",
				"src/engine/handler.hpp"
			],
			[
				"engine",
				"src/engine/engine.cpp"
			],
			[
				"debug",
				"src/engine/debug.hpp"
			],
			[
				"handl",
				"src/engine/handler.hpp"
			],
			[
				"progracpp",
				"src/engine/gl/program.cpp"
			],
			[
				"conecp",
				"src/engine/objects/cone.cpp"
			],
			[
				"sphecpp",
				"src/engine/objects/sphere.cpp"
			],
			[
				"spliecp",
				"src/engine/objects/spline.cpp"
			],
			[
				"cub",
				"src/engine/objects/cuboid.cpp"
			],
			[
				"quadri",
				"src/engine/objects/quadrilateral.cpp"
			],
			[
				"triancpp",
				"src/engine/objects/triangle.cpp"
			],
			[
				"circcpp",
				"src/engine/objects/circle.cpp"
			],
			[
				"objehpp",
				"src/engine/objects/object.hpp"
			],
			[
				"bufferc",
				"src/engine/gl/buffer.cpp"
			],
			[
				"circhp",
				"src/engine/objects/circle.hpp"
			],
			[
				"circlecpp",
				"src/engine/objects/circle.cpp"
			],
			[
				"vbo",
				"src/engine/gl/vbo.cpp"
			],
			[
				"splic",
				"src/engine/objects/spline.cpp"
			],
			[
				"basiclightipass",
				"src/engine/passes/basiclightingpass.cpp"
			],
			[
				"lightingrecpp",
				"src/engine/passes/basiclightingrender.cpp"
			],
			[
				"conecpp",
				"src/engine/objects/cone.cpp"
			],
			[
				"sphe",
				"src/engine/objects/sphere.cpp"
			],
			[
				"quadr",
				"src/engine/objects/quadrilateral.cpp"
			],
			[
				"tria",
				"src/engine/objects/triangle.cpp"
			],
			[
				"vaop",
				"src/engine/gl/vao.cpp"
			],
			[
				"vao",
				"src/engine/gl/vao.hpp"
			],
			[
				"textpasscp",
				"src/engine/passes/texturepass.cpp"
			],
			[
				"sohehp",
				"src/engine/objects/sphere.hpp"
			],
			[
				"conehpp",
				"src/engine/objects/cone.hpp"
			],
			[
				"quad",
				"src/engine/objects/quadrilateral.hpp"
			],
			[
				"spli",
				"src/engine/objects/spline.hpp"
			],
			[
				"objecpp",
				"src/engine/objects/object.cpp"
			],
			[
				"obje",
				"src/engine/objects/object.hpp"
			],
			[
				"handcp",
				"src/engine/handler.cpp"
			],
			[
				"interfacpp",
				"src/engine/objects/objectinterface.cpp"
			],
			[
				"objeinterfacehpp",
				"src/engine/objects/objectinterface.hpp"
			],
			[
				"buffer",
				"src/engine/gl/buffer.hpp"
			],
			[
				"ibohpp",
				"src/engine/gl/ibo.hpp"
			],
			[
				"ibo",
				"src/engine/gl/ibo.cpp"
			],
			[
				"obcpp",
				"src/engine/objects/object.cpp"
			],
			[
				"cuboi",
				"src/engine/objects/cuboid.cpp"
			],
			[
				"texthpp",
				"src/engine/gl/texture.hpp"
			],
			[
				"pass",
				"src/engine/passes/pass.hpp"
			],
			[
				"gbuffpas",
				"src/engine/passes/gbufferpass.cpp"
			],
			[
				"raycascp",
				"src/engine/passes/raycastingpass.cpp"
			],
			[
				"castipass",
				"src/engine/passes/raycastingpass.hpp"
			],
			[
				"passhpp",
				"src/engine/passes/pass.hpp"
			],
			[
				"rayrenc",
				"src/engine/passes/raytracingrender.cpp"
			],
			[
				"gbuff",
				"src/engine/passes/gbufferrender.hpp"
			],
			[
				"fbohpp",
				"src/engine/gl/fbo.hpp"
			],
			[
				"fbo",
				"src/engine/gl/fbo.cpp"
			],
			[
				"raycomphpp",
				"src/engine/passes/raycomputingpass.hpp"
			],
			[
				"gbuffrencp",
				"src/engine/passes/gbufferrender.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/Documents/project/project.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 167.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
